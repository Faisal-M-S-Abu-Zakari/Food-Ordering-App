// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1- now i make the schema , but it still not appear on my data base 
// 2- you need to migrate it , npx prisma migrate dev
// 3- npx prisma generate , to generate prisma/client to start making query and mutation on DB
// 4- now , go to lib ==> prisma.ts , this file for making connection function with DB
model Product {
  id          String @id @default(uuid())
  name        String
  description String
  image       String
  // this order for the product , how they will look on app
  order       Int
  basePrise   Float

  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  // كل منتج له اكثر من حجم فبمجرد اضافتك لهذا العمود و عمل حفظ فانه لوحده بينشأ العلاقة
  sizes      Size[]
  extras     Extra[]
  Category   Category       @relation(fields: [categoryId], references: [id])
  categoryId String
  // each product has many order product
  orders     OrderProduct[]
}

model Size {
  id        String       @id @default(uuid())
  // هان انا عندي اسماء محددة للاحجام لذلك حددتهم تحت لحتى ما يقبل غيرهم
  name      ProductSizes
  price     Float
  // يتم انشاءها تلقائي عند اضافة العلاقة فوق
  product   Product      @relation(fields: [productId], references: [id])
  productId String
}

enum ProductSizes {
  SMALL
  MEDUIM
  LARGE
}

// نفس يلي عملته مع الاحجام بتكرره هان 
// طبعا انا بفصله في مودل لحال لانه لو لاحظت هتلاقيه بيرندر اسم و سعر يبقى افصله لوحده بيكون ارتب ... نفس الشيء للاحجام
model Extra {
  id        String           @id @default(uuid())
  // هان انا عندي اسماء محددة للاحجام لذلك حددتهم تحت لحتى ما يقبل غيرهم
  name      ExtraIngrediants
  price     Float
  // يتم انشاءها تلقائي عند اضافة العلاقة فوق
  product   Product          @relation(fields: [productId], references: [id])
  productId String
}

enum ExtraIngrediants {
  CHEESE
  BACON
  TOMATO
  ONION
  PEPPER
}

// each product has category , so we need to make model , then make relationship with product
model Category {
  id       String    @id @default(uuid())
  name     String
  order    Int       @default(autoincrement())
  products Product[]
}

// to make order , you need user ... so create the user model
// after creating the order model , you will find that each user has many order . make the relationship between the user and the product that he orderd (the quantity)
model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  name         String
  image        String?
  phone        String?
  streetAdress String?
  postalCode   String?
  city         String?
  country      String?
  role         UserRole       @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  // each user has many order product
  orders       OrderProduct[]
  accounts     Account[]
  session      Session[]
}

enum UserRole {
  ADMIN
  USER
}

// we need order model to render the data in order page , and you will find that we can determine the quantity . so , i need to make relationship with order product 
model Order {
  id           String         @id @default(uuid())
  paid         Boolean        @default(false)
  subTotal     Float
  deliveryFee  Float
  totalPrice   Float
  userEmail    String
  phone        String
  streetAdress String
  postalCode   String
  city         String
  country      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  // هان ما استدعيت مودل المنتج لانه انا بدي عدد المنتج المطلوبة (التي تم شراءها)
  products     OrderProduct[]
}

// فصلتها لوحدها لانه ممكن يكبر معك المشروع لذلك الافضل تفصلها 
// هان بتمثل عدد الكمية الموجودة من هذا المنتج
model OrderProduct {
  id        String  @id @default(uuid())
  quantity  Int
  // each order will have many quantity
  Order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  // في التطبيق ممكن الزائر برضو يطلب منتج و يشتريه لذلك مش اجباري يكون اله حساب مسجل 
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?
  //each product will have many order (quantity)
  Product   Product @relation(fields: [productId], references: [id])
  productId String
}

// now to use nextAuth with prisma to allow user to login , i have to declare : 
// these model i gett them from nextAuth then i go to adapter and choose prisma
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// this is for user session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

//  this for expire for the token itself , not for session
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
